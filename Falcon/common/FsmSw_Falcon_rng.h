/***********************************************************************************************************************
*
*                                          IAV GmbH
*
***********************************************************************************************************************/
/*
*
*  $File$
*
*  $Author$
*
*  $Date$
*
*  $Rev$
*
***********************************************************************************************************************/
#ifndef FSMSW_FALCON_RNG_H
#define FSMSW_FALCON_RNG_H

/**********************************************************************************************************************/
/* INCLUDES                                                                                                           */
/**********************************************************************************************************************/
#include "Platform_Types.h"

/**********************************************************************************************************************/
/* DEFINES                                                                                                            */
/**********************************************************************************************************************/

/**********************************************************************************************************************/
/* TYPES                                                                                                              */
/**********************************************************************************************************************/
/* Structure for a PRNG. This includes a large buffer so that values get generated in advance. The 'state' is used to
 * keep the current PRNG algorithm state (contents depend on the selected algorithm).*
 * The unions with 'dummy_u64' are there to ensure proper alignment for 64-bit direct access. */
typedef struct
{
    union
    {
        uint8 d[512]; /* MUST be 512, exactly */
        uint64 dummy_u64;
    } buf;

    uint32 ptr;

    union
    {
        uint8 d[256];
        uint64 dummy_u64;
    } state;

    sint32 type;
} prng;

/**********************************************************************************************************************/
/* GLOBAL VARIABLES                                                                                                   */
/**********************************************************************************************************************/

/**********************************************************************************************************************/
/* MACROS                                                                                                             */
/**********************************************************************************************************************/

/**********************************************************************************************************************/
/* PUBLIC FUNCTION PROTOTYPES                                                                                         */
/**********************************************************************************************************************/
void     FsmSw_Falcon_prng_init(prng *p, inner_shake256_context *src);
void     FsmSw_Falcon_prng_get_bytes(prng *p, void *dst, uint32 len);
uint64   FsmSw_Falcon_prng_get_u64(prng *p);
uint32   FsmSw_Falcon_prng_get_u8(prng *p);


#endif /* FSMSW_FALCON_RNG_H */
