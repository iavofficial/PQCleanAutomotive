/***********************************************************************************************************************
*
*                                          IAV GmbH
*
***********************************************************************************************************************/
/*
*
*  $File$
*
*  $Author$
*
*  $Date$
*
*  $Rev$
*
***********************************************************************************************************************/
#ifndef FSMSW_SPHINCSSHAKE_128FSIMPLE_WOTSX1_H
#define FSMSW_SPHINCSSHAKE_128FSIMPLE_WOTSX1_H

/**********************************************************************************************************************/
/* INCLUDES                                                                                                           */
/**********************************************************************************************************************/
#include "Platform_Types.h"
#include "FsmSw_SphincsShake_128fSimple_context.h"
#include "FsmSw_SphincsShake_128fSimple_params.h"

/**********************************************************************************************************************/
/* DEFINES                                                                                                            */
/**********************************************************************************************************************/
/* Macro to set the leaf_info to something 'benign', that is, it would run with the same time as it does during the
 * real signing process. Used only by the benchmark code */
#define INITIALIZE_LEAF_INFO_X1(info, addr, step_buffer) { \
                                                             (info).wots_sig = 0;             \
                                                             (info).wots_sign_leaf = ~0;      \
                                                             (info).wots_steps = step_buffer; \
                                                             memcpy( &(info).leaf_addr[0], (addr), 32 ); \
                                                             memcpy( &(info).pk_addr[0], (addr), 32 ); \
                                                         }


/**********************************************************************************************************************/
/* TYPES                                                                                                              */
/**********************************************************************************************************************/
struct leaf_info_x1
{
    uint8 *wots_sig;
    uint32 wots_sign_leaf; /* The index of the WOTS we're using to sign */
    uint32 *wots_steps;
    uint32 leaf_addr[8];
    uint32 pk_addr[8];
};

/**********************************************************************************************************************/
/* GLOBAL VARIABLES                                                                                                   */
/**********************************************************************************************************************/

/**********************************************************************************************************************/
/* MACROS                                                                                                             */
/**********************************************************************************************************************/

/**********************************************************************************************************************/
/* PUBLIC FUNCTION PROTOTYPES                                                                                         */
/**********************************************************************************************************************/


void FsmSw_SphincsShake_128fSimple_wots_gen_leafx1(uint8 *dest, const sphincs_shake_128f_ctx *ctx, uint32 leaf_idx,
                                                   void *v_info);

#endif /* FSMSW_SPHINCSSHAKE_128FSIMPLE_WOTSX1_H */
